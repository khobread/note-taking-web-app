{"ast":null,"code":"import _toConsumableArray from\"/Users/kevinlee/Desktop/DEV/playbook-note-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/kevinlee/Desktop/DEV/playbook-note-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from'react';import{nanoid}from'nanoid';import NotesList from'./components/NotesList';import Header from'./components/Header';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),notes=_useState2[0],setNotes=_useState2[1];function switchNotes(id1,id2){var array=notes.map(function(note){return note.id;});var idx1=array.findIndex(function(id){return id===id1;});var idx2=array.findIndex(function(id){return id===id2;});var array2=_toConsumableArray(notes);var temp=array2[idx1];array2[idx1]=array2[idx2];array2[idx2]=temp;setNotes(array2);};var addNote=function addNote(text){var newNote={id:nanoid(),text:text};var newNotes=[].concat(_toConsumableArray(notes),[newNote]);setNotes(newNotes);};var deleteNote=function deleteNote(id){var newNotes=notes.filter(function(note){return note.id!==id;});setNotes(newNotes);};return/*#__PURE__*/_jsx(\"div\",{className:\"\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(NotesList,{notes:notes,switchNotes:switchNotes,handleAddNote:addNote,handleDeleteNote:deleteNote})]})});};export default App;","map":{"version":3,"sources":["/Users/kevinlee/Desktop/DEV/playbook-note-app/src/App.js"],"names":["useState","nanoid","NotesList","Header","App","notes","setNotes","switchNotes","id1","id2","array","map","note","id","idx1","findIndex","idx2","array2","temp","addNote","text","newNote","newNotes","deleteNote","filter"],"mappings":"gVAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,C,wFAEA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,CACjB,cAA0BJ,QAAQ,CAAC,EAAD,CAAlC,wCAAOK,KAAP,eAAcC,QAAd,eAEA,QAASC,CAAAA,WAAT,CAAqBC,GAArB,CAA0BC,GAA1B,CAA+B,CAC9B,GAAMC,CAAAA,KAAK,CAAGL,KAAK,CAACM,GAAN,CAAU,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,EAAT,EAAd,CAAd,CACA,GAAMC,CAAAA,IAAI,CAAGJ,KAAK,CAACK,SAAN,CAAgB,SAACF,EAAD,QAAQA,CAAAA,EAAE,GAAKL,GAAf,EAAhB,CAAb,CACA,GAAMQ,CAAAA,IAAI,CAAGN,KAAK,CAACK,SAAN,CAAgB,SAACF,EAAD,QAAQA,CAAAA,EAAE,GAAKJ,GAAf,EAAhB,CAAb,CAEA,GAAMQ,CAAAA,MAAM,oBAAOZ,KAAP,CAAZ,CACA,GAAMa,CAAAA,IAAI,CAAGD,MAAM,CAACH,IAAD,CAAnB,CACAG,MAAM,CAACH,IAAD,CAAN,CAAeG,MAAM,CAACD,IAAD,CAArB,CACAC,MAAM,CAACD,IAAD,CAAN,CAAeE,IAAf,CAEAZ,QAAQ,CAACW,MAAD,CAAR,CACA,EAED,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,IAAD,CAAU,CACzB,GAAMC,CAAAA,OAAO,CAAG,CACfR,EAAE,CAAEZ,MAAM,EADK,CAEfmB,IAAI,CAAEA,IAFS,CAAhB,CAIA,GAAME,CAAAA,QAAQ,8BAAOjB,KAAP,GAAcgB,OAAd,EAAd,CACAf,QAAQ,CAACgB,QAAD,CAAR,CACA,CAPD,CASA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACV,EAAD,CAAQ,CAC1B,GAAMS,CAAAA,QAAQ,CAAGjB,KAAK,CAACmB,MAAN,CAAa,SAACZ,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYA,EAAtB,EAAb,CAAjB,CACAP,QAAQ,CAACgB,QAAD,CAAR,CACA,CAHD,CAKA,mBACC,YAAK,SAAS,CAAC,EAAf,uBACC,aAAK,SAAS,CAAC,WAAf,wBACC,KAAC,MAAD,IADD,cAEC,KAAC,SAAD,EACC,KAAK,CAAEjB,KADR,CAEC,WAAW,CAAEE,WAFd,CAGC,aAAa,CAAEY,OAHhB,CAIC,gBAAgB,CAAEI,UAJnB,EAFD,GADD,EADD,CAaA,CA3CD,CA6CA,cAAenB,CAAAA,GAAf","sourcesContent":["import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport NotesList from './components/NotesList';\nimport Header from './components/Header';\n\nconst App = () => {\n\tconst [notes, setNotes] = useState([]);\n\n\tfunction switchNotes(id1, id2) {\n\t\tconst array = notes.map(note => note.id);\n\t\tconst idx1 = array.findIndex((id) => id === id1);\n\t\tconst idx2 = array.findIndex((id) => id === id2);\n\t\n\t\tconst array2 = [...notes];\n\t\tconst temp = array2[idx1];\n\t\tarray2[idx1] = array2[idx2];\n\t\tarray2[idx2] = temp;\n\t\t\n\t\tsetNotes(array2);\n\t};\n\n\tconst addNote = (text) => {\n\t\tconst newNote = {\n\t\t\tid: nanoid(),\n\t\t\ttext: text,\n\t\t};\n\t\tconst newNotes = [...notes, newNote];\n\t\tsetNotes(newNotes);\n\t};\n\n\tconst deleteNote = (id) => {\n\t\tconst newNotes = notes.filter((note) => note.id !== id);\n\t\tsetNotes(newNotes);\n\t};\n\n\treturn (\n\t\t<div className=\"\">\n\t\t\t<div className='container'>\n\t\t\t\t<Header />\n\t\t\t\t<NotesList\n\t\t\t\t\tnotes={notes}\n\t\t\t\t\tswitchNotes={switchNotes}\n\t\t\t\t\thandleAddNote={addNote}\n\t\t\t\t\thandleDeleteNote={deleteNote}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}